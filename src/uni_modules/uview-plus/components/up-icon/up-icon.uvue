<template>
	<view
	    class="up-icon"
	    @tap="clickHandler"
	    :class="['up-icon--' + labelPos]"
	>
		<image
		    class="up-icon__img"
		    v-if="isImg"
		    :src="name"
		    :mode="imgMode"
		    :style="[imgStyle, addStyle(customStyle)]"
		></image>
		<text
		    v-else
		    class="up-icon__icon"
		    :class="uClasses"
		    :style="[iconStyle, addStyle(customStyle)]"
		    :hover-class="hoverClass"
		>{{icon}}</text>
		<!-- 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示 -->
		<text
		    v-if="label !== ''" 
		    class="up-icon__label"
		    :style="{
			color: labelColor,
			fontSize: addUnit(labelSize),
			marginLeft: labelPos == 'right' ? addUnit(space) : 0,
			marginTop: labelPos == 'bottom' ? addUnit(space) : 0,
			marginRight: labelPos == 'left' ? addUnit(space) : 0,
			marginBottom: labelPos == 'top' ? addUnit(space) : 0,
		}"
		>{{ label }}</text>
	</view>
</template>

<script>
	// 引入图标名称，已经对应的unicode
	import icons from './icons'
	import { propsIcon } from './props';
	import { mpMixin } from '../../libs/mixin/mpMixin';
	import { mixin } from '../../libs/mixin/mixin';
	import { addUnit, addStyle } from '../../libs/function/index';
	import config from '../../libs/config/config';
	/**
	 * icon 图标
	 * @description 基于字体的图标集，包含了大多数常见场景的图标。
	 * @tutorial https://ijry.github.io/uview-plus/components/icon.html
	 * @property {String}			name			图标名称，见示例图标集
	 * @property {String}			color			图标颜色,可接受主题色 （默认 color['up-content-color'] ）
	 * @property {String | Number}	size			图标字体大小，单位px （默认 '16px' ）
	 * @property {Boolean}			bold			是否显示粗体 （默认 false ）
	 * @property {String | Number}	index			点击图标的时候传递事件出去的index（用于区分点击了哪一个）
	 * @property {String}			hoverClass		图标按下去的样式类，用法同uni的view组件的hoverClass参数，详情见官网
	 * @property {String}			customPrefix	自定义扩展前缀，方便用户扩展自己的图标库 （默认 'upicon' ）
	 * @property {String | Number}	label			图标右侧的label文字
	 * @property {String}			labelPos		label相对于图标的位置，只能right或bottom （默认 'right' ）
	 * @property {String | Number}	labelSize		label字体大小，单位px （默认 '15px' ）
	 * @property {String}			labelColor		图标右侧的label文字颜色 （ 默认 color['up-content-color'] ）
	 * @property {String | Number}	space			label与图标的距离，单位px （默认 '3px' ）
	 * @property {String}			imgMode			图片的mode
	 * @property {String}	width			显示图片小图标时的宽度
	 * @property {String}	height			显示图片小图标时的高度
	 * @property {String}	top				图标在垂直方向上的定位 用于解决某些情况下，让图标垂直居中的用途  （默认 0 ）
	 * @property {Boolean}			stop			是否阻止事件传播 （默认 false ）
	 * @property {Object}			customStyle		icon的样式，对象形式
	 * @event {Function} click 点击图标时触发
	 * @event {Function} touchstart 事件触摸时触发
	 * @example <up-icon name="photo" color="#2979ff" size="28px"></up-icon>
	 */
	export default {
		name: 'up-icon',
		data() {
			return {

			}
		},
		emits: ['click'],
		mixins: [mpMixin, mixin, propsIcon],
		computed: {
			uClasses() : any {
				let classes:Array<string> = []
				classes.push(this.customPrefix + '-' + this.name)
				// uview-plus的自定义图标类名为up-iconfont
				if (this.customPrefix == 'upicon') {
					classes.push('up-iconfont')
				} else {
					// 不能缺少这一步，否则自定义图标会无效
					classes.push(this.customPrefix)
				}
				// 主题色，通过类配置
				// if (this.color != ''
				// 	&& config.getArray('type')?.includes(this.color) as Boolean
				// ) classes.push('up-icon__icon--' + this.color)
				// 阿里，头条，百度小程序通过数组绑定类名时，无法直接使用[a, b, c]的形式，否则无法识别
				// 故需将其拆成一个字符串的形式，通过空格隔开各个类名
				return classes.join(' ')
			},
			iconStyle(): any {
				let style = {
					fontSize: addUnit(this.size.toString()),
					lineHeight: addUnit(this.size.toString()),
					fontWeight: this.bold ? 'bold' : 'normal',
					// 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
					top: addUnit(this.top)
				}
				// 非主题色值时，才当作颜色值
				let types = config.getArray('type')
				// console.log('###', types)
				// if (this.color != '' && types.includes(this.color)) {
				// 	style['color'] = this.color
				// }

				return style
			},
			// 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
			isImg(): any {
				return this.name.indexOf('/') !== -1
			},
			imgStyle(): any {
				let style = {}
				// 如果设置width和height属性，则优先使用，否则使用size属性
				style['width'] = this.width != '' ? addUnit(this.width) : addUnit(this.size!!.toString())
				style['height'] = this.height != '' ? addUnit(this.height) : addUnit(this.size!!.toString())
				return style
			},
			// 通过图标名，查找对应的图标
			icon(): string {
				// 使用自定义图标的时候页面上会把name属性也展示出来，所以在这里处理一下
				if (this.customPrefix !== "upicon") return "";
				// 如果内置的图标中找不到对应的图标，就直接返回name值，因为用户可能传入的是unicode代码
				if (icons['upicon-' + this.name] != null) {
					return icons['upicon-' + this.name] as string
				} else {
					return this.name
				}
			}
		},
		created() {
		},
		methods: {
			addStyle(val: any): any {
				return addStyle(val)
			},
			addUnit(val: any): string {
				return addUnit(val)
			},
			clickHandler(e: any) {
				this.$emit('click', this.index)
				// 是否阻止事件冒泡
			// 	this.stop && this.preventEvent(e)
			}
		}
	}
</script>

<style lang="scss" scoped>
	@import "../../libs/css/components.scss";

	// 变量定义
	$up-icon-primary: $up-primary !default;
	$up-icon-success: $up-success !default;
	$up-icon-info: $up-info !default;
	$up-icon-warning: $up-warning !default;
	$up-icon-error: $up-error !default;
	$up-icon-label-line-height:1 !default;

	.up-icon {
		display: flex;
		align-items: center;

		&--left {
			flex-direction: row-reverse;
			align-items: center;
		}

		&--right {
			flex-direction: row;
			align-items: center;
		}

		&--top {
			flex-direction: column-reverse;
			justify-content: center;
		}

		&--bottom {
			flex-direction: column;
			justify-content: center;
		}

		&__icon {
			font-family: iconfont;
			position: relative;
			// @include flex;
			// align-items: center;

			&--primary {
				color: $up-icon-primary;
			}

			&--success {
				color: $up-icon-success;
			}

			&--error {
				color: $up-icon-error;
			}

			&--warning {
				color: $up-icon-warning;
			}

			&--info {
				color: $up-icon-info;
			}
		}

		&__img {
			height: auto;
			// will-change: transform;
		}

		&__label {
			line-height: $up-icon-label-line-height;
		}
	}
</style>
